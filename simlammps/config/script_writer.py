from simphony.core.cuba import CUBA

from simlammps.config.pair_style import PairStyle
from simlammps.cuba_extension import CUBAExtension


class ConfigurationError(RuntimeError):
    pass


class ScriptWriter(object):
    """ Writer of a LAMMPS-commands script

    The ScriptWriter generates a series of LAMMPS commands
    (that make up a LAMMPS-input script).

    The command script generated by this class can be passed to
    a LAMMPS executable as a file or string.

    TODO: script can be passed to the library interface of LAMMPS or
    individual commands generated by this script can be passed
    "one by one" to the library interface of LAMMPS
    """

    @staticmethod
    def get_configuration(BC, CM, SP,
                          input_data_file=None, output_data_file=None):
        """ Return configuration command-script

        Parameters
        ----------
        BC : DataContainer
            container of attributes related to the boundary conditions
        CM : DataContainer
            container of attributes related to the computational method
        SP : DataContainer
            container of attributes related to the system parameters/conditions
        input_data_file: string, optional
            name of data file to be read at beginning of run (input)
        output_data_file: string, optional
            name of data file to be written after run (output)

        Returns
        -------
        command script - string
            lines of a LAMMPS command script

        """

        _check_configuration(CM)

        number_steps = CM[CUBA.NUMBER_OF_TIME_STEPS]
        time_step = CM[CUBA.TIME_STEP]

        pair_style = PairStyle(SP)
        pair_style_input = pair_style.get_global_config()
        pair_coeff_input = pair_style.get_pair_coeffs()

        # TODO
        boundary = _get_boundary(BC)

        # TODO
        fixes = _get_thermodynamic_ensemble(CM)

        result = CONFIGURATION_BEFORE_READ.format(BOUNDARY=boundary,
                                                  PAIR_STYLE=pair_style_input)
        if input_data_file:
            result += READ_DATA.format(INPUT_DATAFILE=input_data_file)

        result += CONFIGURATION_AFTER_READ.format(FIXES=fixes,
                                                  NUMBER_STEPS=number_steps,
                                                  TIME_STEP=time_step,
                                                  PAIR_COEFF=pair_coeff_input)

        if output_data_file:
            result += WRITE_DATA.format(OUTPUT_DATAFILE=output_data_file)

        return result


def _check_configuration(CM):
    """ Check if everything is configured correctly

    Raises
    ------
    ConfigurationError
        if anything is wrong with the configuration
    """
    cm_requirements = [CUBA.NUMBER_OF_TIME_STEPS,
                       CUBA.TIME_STEP,
                       CUBAExtension.THERMODYNAMIC_ENSEMBLE]

    missing = [str(req) for req in cm_requirements
               if req not in CM.keys()]

    msg = ""
    if missing:
        msg = "Problem with CM component. "
        msg += "Missing: " + ', '.join(missing)

    # TODO check SP, BC

    if msg:
        # TODO throw unique exception that
        # users can catch and then try to fix
        # their configuration
        raise ConfigurationError(msg)

CONFIGURATION_BEFORE_READ = """
# Control file generated by SimPhoNy

dimension 3
{BOUNDARY}

atom_style  atomic
neighbor    0.3 bin
neigh_modify    delay 5

{PAIR_STYLE}

"""

READ_DATA = """
# read from SimPhoNy-generated file
read_data {INPUT_DATAFILE}

"""

CONFIGURATION_AFTER_READ = """

{PAIR_COEFF}

{FIXES}

# Run

timestep {TIME_STEP}

run {NUMBER_STEPS}
"""

WRITE_DATA = """

# write results to simphony-generated file
write_data {OUTPUT_DATAFILE}
"""


def _get_thermodynamic_ensemble(CM):
    esemble = CM[CUBAExtension.THERMODYNAMIC_ENSEMBLE]
    if esemble == "NVE":
        return "fix 1 all nve"
    else:
        message = ("Unsupported ensemble was provided "
                   "CM[CUBAExtension.THERMODYNAMIC_ENSEMBLE] = {}")
        ConfigurationError(message.format(esemble))


def _get_boundary(BC):
    """ get lammps boundary command from BC

    The boundary command can be either fixed or periodic.

    >> BC[CUBAExtension.BOX_FACES] = ("periodic", "fixed", "periodic"]

    """

    error_message = ""
    boundary_command = "boundary"

    # mapping of cuds-value to lammps string
    mappings = {'periodic': 'p', 'fixed': 'f'}

    if len(BC[CUBAExtension.BOX_FACES]) != 3:
        error_message += "3 dimensions need to be given.\n"
    for b in BC[CUBAExtension.BOX_FACES]:
        if b in mappings:
            boundary_command += " {}".format(mappings[b])
        else:
            error_message += "'{}' is not supported\n"
    if error_message:
        message = ("Unsupported boundary was provided "
                   "BC[CUBAExtension.BOX_FACES] = {}\n"
                   "{}")
        ConfigurationError(message.format(
            BC[CUBAExtension.BOX_FACES], error_message))
    return boundary_command
